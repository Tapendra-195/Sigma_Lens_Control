#ifndef Constants_h
#define Constants_h


const String LENS_TO_BODY = "Lens->Body ";
const String BODY_TO_LENS = "Body->Lens ";
const String INIT_COMPLETE_MSG = "Init Complete";
const String RESETTING = "RESETTING too many unusedClockWindows";

const int INIT_COMPLETE = 2;
const int INVALID_POSITION = -999;
const int lensToBody = 1;
const int bodyToLens = 0;
const byte VD_DWELL_LOW = 62; // micros



const int MAX_BUFFER_SIZE = 256;

enum MESSAGE_CLASS{
  MESSAGE_CLASS_INIT = 0x02,  //During Initialization
  MESSAGE_CLASS_NORMAL = 0x01 //after initialization
};
enum HEADER{
  INDEX_START=0,            //start byte at index 0
  INDEX_MESSAGE_LENGTH_L=1, //Low byte of message length at index 1
  INDEX_MESSAGE_LENGTH_H=2, //High byte of message length at index 2
  INDEX_MESSAGE_CLASS=3,    //Message class at index 3
  INDEX_SEQUENCE_NUMBER=4,  //Sequence number at index 4
  INDEX_MESSAGE_TYPE=5      //Message Type at index 5
};
enum MESSAGE_TYPES{
  MESSAGE_TYPE_03=0x03, //Cam to Lens Message containing Aperture command
  MESSAGE_TYPE_04=0x04, //Cam to Lens Message containing Focus command
  MESSAGE_TYPE_05=0x05, //Lens to Cam Message containing Aperture info
  MESSAGE_TYPE_06=0x06  //Lens to Cam Message containing Focus info
};
enum PADDING{
  HEADER_LENGTH=6, // START_BYTE, MESSAGE_LENGTH_LOW, MESSAGE_LENGTH_HIGH, MESSAGE_CLASS, SEQUENCE_NUMBER, MESSAGE_TYPE
  FOOTER_LENGTH=3  // CHECKSUM_LOW, CHECKSUM_HIGH, END_BYTE
};
enum BYTE_VALUES{
  START_BYTE = 0xF0, //Start of the Message
  END_BYTE = 0x55    //End of the Message
};


enum class BYTES03{
  INDEX_APERTURE_L1 = 9,
    INDEX_APERTURE_H1 = 10,
    INDEX_APERTURE_L2 = 11,
    INDEX_APERTURE_H2 =12
};

enum class BYTES04{
  INDEX_DEL_FOCUS_L = 20,
    INDEX_DEL_FOCUS_H = 21
};


enum class BYTES05{
  INDEX_APERTURE_L1 = 6,
    INDEX_APERTURE_H1 = 7,
    INDEX_APERTURE_L2 = 8,
    INDEX_APERTURE_H2 =9
};

enum class BYTES06{
  INDEX_FOCUS_L1 = 8,
    INDEX_FOCUS_H1 = 9,
    INDEX_FOCUS_L2 = 26,
    INDEX_FOCUS_H2 = 27
};


const byte norm03[] = {0xEC, 0x00, 0x00, 0x55, 0x14, 0x55, 0x14, 0x1C, 0x00, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x2F, 0x15, 0x16};

const byte norm04[] = {0x00, 0x00, 0x19, 0x83, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00};


//Speed change messages
const byte init01[] = {0xF0, 0x29, 0x00, 0x02, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x2F, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x0A, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const byte init07[] = {0xF0, 0x0A, 0x00, 0x02, 0x00, 0x07, 0x00, 0x13, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

//Sets 1500000 baud rate
const byte init0C[] = {0xF0, 0x0A, 0x00, 0x02, 0x00, 0x0C, 0x02, 0x1A, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

//Initialization
const byte init0B[] = {0xF0, 0x0B, 0x00, 0x02, 0x00, 0x0B, 0x60, 0x00, 0x78, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00};
const byte init3F[] = {0xF0, 0x0A, 0x00, 0x02, 0x00, 0x3F, 0x00, 0x4B, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const byte init3D[] = {0xF0, 0x20, 0x00, 0x02, 0x00, 0x3D, 0xBD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x01, 0x55};
const byte init08[] = {0xF0, 0x11, 0x00, 0x02, 0x00, 0x08, 0xC6, 0xE1, 0x00, 0x00, 0x00, 0x0C, 0x62, 0x02, 0x32, 0x02, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const byte init09[] = {0xF0, 0x0D, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x55, 0x00, 0x00, 0x00};
const byte init0D[] = {0xF0, 0x0A, 0x00, 0x02, 0x00, 0x0D, 0x00, 0x19, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const byte init10[] = {0xF0, 0x0A, 0x00, 0x02, 0x00, 0x10, 0x1F, 0x3B, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
const byte init0A[] = {0xF0, 0x19, 0x00, 0x02, 0x00, 0x0A, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x02, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};



//Constants for pretending to be a Lens, not needed to pretend to be a camera.
const byte init05[] ={0xF0, 0x75, 0x00, 0x01, 0x01, 0x05, 0x00, 0x11, 0x00, 0x11, 0x00, 0x00, 0x11, 0x00, 0x07, 0x27, 0x00, 0x27, 0x00, 0x64, 0x01, 0x64, 0x01, 0xAA, 0x13, 0x01, 0x00, 0x07, 0x80, 0xFF, 0x9B, 0x00, 0x96, 0x00, 0x27, 0x01, 0x00, 0x00, 0xB1, 0x09, 0x42, 0x3F, 0x3A, 0x2C, 0x01, 0x23, 0x09, 0x07, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x06, 0x06, 0x9B, 0x00, 0xD0, 0x04, 0x11, 0x01, 0xF4, 0xFD, 0xD0, 0x04, 0x11, 0x01, 0xF4, 0xFD, 0x02, 0x23, 0x47, 0x43, 0x09, 0x10, 0x0C, 0x97, 0xF1, 0x20, 0x97, 0xF1, 0x20, 0xCF, 0x11, 0x55 };

const byte init06[] = {0xF0, 0x30, 0x00, 0x01, 0x01, 0x06, 0x02, 0x00, 0x9E, 0x25, 0x00, 0x00, 0x10, 0x4E, 0x20, 0x0F, 0x32, 0x00, 0x00, 0x21, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x25, 0x00, 0x41, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xDF, 0x03, 0x55};

const byte norm05[] = {0x00, 0x11, 0x00, 0x11, 0x00, 0x00, 0x11, 0x00, 0x07, 0x27, 0x00, 0x27, 0x00, 0x64, 0x01, 0x64, 0x01, 0xAA, 0x13, 0x01, 0x00, 0x07, 0x80, 0xFF, 0x9B, 0x00, 0x96, 0x00, 0x27, 0x01, 0x00, 0x00, 0xB1, 0x09, 0x42, 0x3F, 0x3A, 0x2C, 0x01, 0x23, 0x09, 0x07, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x06, 0x06, 0x9B, 0x00, 0xD0, 0x04, 0x11, 0x01, 0xF4, 0xFD, 0xD0, 0x04, 0x11, 0x01, 0xF4, 0xFD, 0x02, 0x23, 0x47, 0x43, 0x09, 0x10, 0x0C, 0x97, 0xF1, 0x20, 0x97, 0xF1, 0x20};

const byte norm06[] = {0x02, 0x00, 0x9E, 0x25, 0x00, 0x00, 0x10, 0x4E, 0x20, 0x0F, 0x32, 0x00, 0x00, 0x21, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x9E, 0x25, 0x00, 0x41, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80};

#endif
